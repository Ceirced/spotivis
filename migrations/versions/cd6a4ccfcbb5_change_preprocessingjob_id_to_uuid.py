"""Change PreprocessingJob id to uuid

Revision ID: cd6a4ccfcbb5
Revises: d09e626e499a
Create Date: 2025-08-02 13:04:03.450563

"""
from alembic import op
import sqlalchemy as sa
import uuid


# revision identifiers, used by Alembic.
revision = 'cd6a4ccfcbb5'
down_revision = 'd09e626e499a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # SQLite doesn't support ALTER for PRIMARY KEY, so we need to recreate the table
    # First, create a new table with the new schema
    op.create_table('preprocessing_jobs_new',
        sa.Column('uuid', sa.String(length=36), nullable=False),
        sa.Column('task_id', sa.String(length=255), nullable=False),
        sa.Column('uploaded_file_id', sa.Integer(), nullable=False),
        sa.Column('status', sa.String(length=50), nullable=False),
        sa.Column('started_at', sa.DateTime(), nullable=False),
        sa.Column('completed_at', sa.DateTime(), nullable=True),
        sa.Column('edges_file', sa.String(length=500), nullable=True),
        sa.Column('nodes_file', sa.String(length=500), nullable=True),
        sa.Column('final_nodes', sa.Integer(), nullable=True),
        sa.Column('final_edges', sa.Integer(), nullable=True),
        sa.Column('time_periods', sa.Integer(), nullable=True),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['uploaded_file_id'], ['uploaded_files.id'], ),
        sa.PrimaryKeyConstraint('uuid'),
        sa.UniqueConstraint('task_id')
    )
    
    # Copy data from old table to new table, generating UUIDs for existing records
    connection = op.get_bind()
    result = connection.execute(sa.text('SELECT * FROM preprocessing_jobs'))
    
    for row in result:
        new_uuid = str(uuid.uuid4())
        connection.execute(
            sa.text("""
                INSERT INTO preprocessing_jobs_new 
                (uuid, task_id, uploaded_file_id, status, started_at, completed_at, 
                 edges_file, nodes_file, final_nodes, final_edges, time_periods, error_message)
                VALUES (:uuid, :task_id, :uploaded_file_id, :status, :started_at, :completed_at,
                        :edges_file, :nodes_file, :final_nodes, :final_edges, :time_periods, :error_message)
            """),
            {
                'uuid': new_uuid,
                'task_id': row.task_id,
                'uploaded_file_id': row.uploaded_file_id,
                'status': row.status,
                'started_at': row.started_at,
                'completed_at': row.completed_at,
                'edges_file': row.edges_file,
                'nodes_file': row.nodes_file,
                'final_nodes': row.final_nodes,
                'final_edges': row.final_edges,
                'time_periods': row.time_periods,
                'error_message': row.error_message
            }
        )
    
    # Drop the old table and rename the new one
    op.drop_table('preprocessing_jobs')
    op.rename_table('preprocessing_jobs_new', 'preprocessing_jobs')
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Create the old table structure
    op.create_table('preprocessing_jobs_old',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('task_id', sa.String(length=255), nullable=False),
        sa.Column('uploaded_file_id', sa.Integer(), nullable=False),
        sa.Column('status', sa.String(length=50), nullable=False),
        sa.Column('started_at', sa.DateTime(), nullable=False),
        sa.Column('completed_at', sa.DateTime(), nullable=True),
        sa.Column('edges_file', sa.String(length=500), nullable=True),
        sa.Column('nodes_file', sa.String(length=500), nullable=True),
        sa.Column('final_nodes', sa.Integer(), nullable=True),
        sa.Column('final_edges', sa.Integer(), nullable=True),
        sa.Column('time_periods', sa.Integer(), nullable=True),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['uploaded_file_id'], ['uploaded_files.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('task_id')
    )
    
    # Copy data back (we'll just use row numbers as IDs)
    connection = op.get_bind()
    result = connection.execute(sa.text('SELECT * FROM preprocessing_jobs'))
    
    id_counter = 1
    for row in result:
        connection.execute(
            sa.text("""
                INSERT INTO preprocessing_jobs_old 
                (id, task_id, uploaded_file_id, status, started_at, completed_at, 
                 edges_file, nodes_file, final_nodes, final_edges, time_periods, error_message)
                VALUES (:id, :task_id, :uploaded_file_id, :status, :started_at, :completed_at,
                        :edges_file, :nodes_file, :final_nodes, :final_edges, :time_periods, :error_message)
            """),
            {
                'id': id_counter,
                'task_id': row.task_id,
                'uploaded_file_id': row.uploaded_file_id,
                'status': row.status,
                'started_at': row.started_at,
                'completed_at': row.completed_at,
                'edges_file': row.edges_file,
                'nodes_file': row.nodes_file,
                'final_nodes': row.final_nodes,
                'final_edges': row.final_edges,
                'time_periods': row.time_periods,
                'error_message': row.error_message
            }
        )
        id_counter += 1
    
    # Drop the new table and rename the old one back
    op.drop_table('preprocessing_jobs')
    op.rename_table('preprocessing_jobs_old', 'preprocessing_jobs')
    
    # ### end Alembic commands ###