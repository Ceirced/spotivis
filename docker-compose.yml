networks:
  app_network:
  default:
    external: true
    name: proxy

volumes:
  pgdata:

name: spotivis

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: flask-app
    entrypoint: [ './boot.sh' ]
    stop_signal: SIGINT
    # to sync the ./api dir with the container only for development
    volumes:
      - ./logs/app:/home/app/logs
      - ./migrations:/home/app/migrations
      - ./instance:/home/app/instance
      - ./uploads:/home/app/uploads
      - ./clean_data:/home/app/clean_data
      - ./app/static/preprocessed:/home/app/app/static/preprocessed
    env_file:
      - .env
    environment:
      - APP_SETTINGS=config.ProductionConfig
      - SQLALCHEMY_DATABASE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    healthcheck:
      test: curl --fail http://localhost:5000 -H 'Host:localhost' || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      app_network:
        aliases:
          - spotivis-app
    restart: unless-stopped

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    image: flask-app
    command: celery -A app.make_celery worker --loglevel INFO -E
    
    stop_signal: SIGINT
    volumes:
      - ./logs/app:/home/app/logs
      - ./migrations:/home/app/migrations
      - ./instance:/home/app/instance
      - ./uploads:/home/app/uploads
      - ./clean_data:/home/app/clean_data
      - ./app/static/preprocessed:/home/app/app/static/preprocessed
    env_file:
      - .env
    environment:
      - APP_SETTINGS=config.ProductionConfig
      - SQLALCHEMY_DATABASE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    networks:
      app_network:
        aliases:
          - celery
    restart: unless-stopped

  nginx:
    build: nginx
    depends_on:
      - app
    networks:
      app_network:
        aliases:
          - nginx
      default:
    restart: unless-stopped
  
  redis:
    image: redis:8-alpine
    restart: unless-stopped
    healthcheck:
      test: redis-cli ping || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      app_network:
        aliases:
          - redis
  
  postgres:
    image: postgres:18-alpine3.22
    environment: 
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      app_network:
        aliases:
          - db 
